version: '2'

volumes:
  tinyauth_postgres_data_dev: {}
  postgres_data_dev: {}
  postgres_backup_dev: {}

services:
  tinyauth_postgres:
    build: ./docker/postgres
    volumes:
      - tinyauth_postgres_data_dev:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=tinyauth
      - POSTGRES_PASSWORD=tinyauth
      - POSTGRES_DB=tinyauth

  tinyauth:
    image: tinyauth/tinyauth:dev
    depends_on:
      - tinyauth_postgres
    command: /gunicorn.sh
    user: flask
    environment:
    - POSTGRES_USER=tinyauth
    - POSTGRES_PASSWORD=tinyauth
    - POSTGRES_HOST=tinyauth_postgres

  postgres:
    build: ./docker/postgres
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - postgres_backup_dev:/backups
    environment:
      - POSTGRES_USER=agentless
      - POSTGRES_PASSWORD=agentless
      - POSTGRES_DB=agentless

  flask:
    build:
      context: .
      dockerfile: ./docker/flask/Dockerfile-dev
    command: /start-dev.sh
    depends_on:
      - postgres
    environment:
      - POSTGRES_USER=agentless
      - POSTGRES_PASSWORD=agentless
      - DATABASE_URI=postgres://agentless:agentless@postgres/agentless
      - TINYAUTH_ACCESS_KEY_ID=gatekeeper
      - TINYAUTH_SECRET_ACCESS_KEY=keymaster
      - TINYAUTH_ENDPOINT=http://tinyauth:5000/
    volumes:
      - .:/app/src
    ports:
      - "8000:8000"
    links:
      - postgres
